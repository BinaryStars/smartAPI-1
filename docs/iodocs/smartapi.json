{
    "basePath": "http://smart-api.info",
    "name": "SmartAPI v1 API",
    "protocol": "rest",
    "publicPath": "",
    "version": "1.0",
    "resources": {
        "API GET Method": {
            "methods": {
                "api_get": {
                    "description": "Retreive metadata about an API based on its id",
                    "httpMethod": "GET",
                    "name": "API GET",
                    "parameters": {
                        "api_id": {
                            "default": "",
                            "description": "A unique API id, e.g. \"mygene.info\", \"myvariant.info\". If \"all\" is passed, a dump of all API metadata is returned.",
                            "location": "path",
                            "required": true,
                            "type": "string"
                        },
                        "fields": {
                            "default": "",
                            "description": "a comma-separated fields to limit the fields returned from the matching API hits. The supported field names can be found from any API object (e.g. http://smart-api.info/api/metadata/mygene.info). Note that it supports dot notation, and wildcards as well, e.g., you can pass \"host\", \"operations.parameters\", \"info.title\", or \"info.*\". If \"fields=all\", all available fields will be returned. Default: \"all\".",
                            "type": "string"
                        }
                    },
                    "path": "/api/metadata/{api_id}"
                }
            }
        },
        "API Query Method": {
            "methods": {
                "api_query": {
                    "description": "Query for existing APIs matching query terms",
                    "httpMethod": "GET",
                    "name": "API Query",
                    "parameters": {
                        "q": {
                            "default": "",
                            "description": "Any query term",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "/api/query/"
                }
            }
        },
        "API Save Method": {
            "methods": {
                "api_post": {
                    "description": "Saving a new API with annotated metadata",
                    "httpMethod": "POST",
                    "name": "API Save",
                    "parameters": {
                        "data": {
                            "default": "",
                            "description": "A JSON formated metadata object",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "path": "/api/query/"
                }
            }
        },
        "API Field Suggestion Method": {
            "methods": {
                "api_field_suggestion": {
                    "description": "For a given field, return the possible field values in existing API database, sorted by the occurences in descending order",
                    "httpMethod": "GET",
                    "name": "API Field Suggestion",
                    "parameters": {
                        "field": {
                            "default": "",
                            "description": "A valid field name from the API metadata object, e.g. \"operations.parameters.type\", \"operations.responses.httpCode\", \"schemes\" ",
                            "required": true,
                            "type": "string"
                        },
                        "size": {
                            "default": 100,
                            "description": "The number of possible values should be returned. The default is top 100",
                            "required": false,
                            "type": "integer"
                        }
                    },
                    "path": "/api/suggestion/"
                }
            }
        }


    }
}
